CC := gcc
CFLAGS := -g -Wall -Wpedantic #-fsanitize=address #-O2 -Werror
SRC_DIR := ../src
UTILS_DIR := $(SRC_DIR)/utils
TEST_DIR := ../tests

LIBNNUTILS_SOURCES := \
	$(UTILS_DIR)/dynamicarray.c \
	$(UTILS_DIR)/dynamicmatrix.c \
	$(UTILS_DIR)/fileIO.c \

LIBNNUTILS_OBJECTS := $(patsubst %.c, %.o, $(LIBNNUTILS_SOURCES))
LIBNNUTILS_OBJECTS := $(notdir $(LIBNNUTILS_OBJECTS))
LIBNNUTILS_OBJECTS := $(addprefix obj/, $(LIBNNUTILS_OBJECTS))

LIBRAWCNEURALNETWORK_SOURCES := \
	$(SRC_DIR)/activationfunctions.c \
	$(SRC_DIR)/layer.c \
	$(SRC_DIR)/neuron.c \
	$(UTILS_DIR)/dynamicarray.c \
	$(UTILS_DIR)/dynamicmatrix.c \
	$(UTILS_DIR)/fileIO.c \

LIBRAWCNEURALNETWORK_OBJECTS := \
	$(patsubst %.c, %.o, $(LIBRAWCNEURALNETWORK_SOURCES))
LIBRAWCNEURALNETWORK_OBJECTS := \
	$(notdir $(LIBRAWCNEURALNETWORK_OBJECTS))
LIBRAWCNEURALNETWORK_OBJECTS := \
	$(addprefix obj/, $(LIBRAWCNEURALNETWORK_OBJECTS))

LIBRAWCNEURALNETWORK_LEGACY_SOURCES := \
	$(SRC_DIR)/activationfunctions.c \
	$(SRC_DIR)/legacy_layer.c \
	$(SRC_DIR)/legacy_neuron.c \
	$(UTILS_DIR)/dynamicarray.c \
	$(UTILS_DIR)/dynamicmatrix.c \
	$(UTILS_DIR)/fileIO.c \
	$(UTILS_DIR)/matrix.c \

LIBRAWCNEURALNETWORK_LEGACY_OBJECTS := \
	$(patsubst %.c, %.o, $(LIBRAWCNEURALNETWORK_LEGACY_SOURCES))
LIBRAWCNEURALNETWORK_LEGACY_OBJECTS := \
	$(notdir $(LIBRAWCNEURALNETWORK_LEGACY_OBJECTS))
LIBRAWCNEURALNETWORK_LEGACY_OBJECTS := \
	$(addprefix obj/, $(LIBRAWCNEURALNETWORK_LEGACY_OBJECTS))

all: raw-c-neural-network utilsTest legacyTest neuralNetworkTest

$(LIBNNUTILS_OBJECTS): $(LIBNNUTILS_SOURCES)
	$(CC) -c -o $@ $<

$(LIBRAWCNEURALNETWORK_OBJECTS): $(LIBRAWCNEURALNETWORK_SOURCES)
	$(CC) -c -o $@ $<

$(LIBRAWCNEURALNETWORK_LEGACY_OBJECTS): $(LIBRAWCNEURALNETWORK_LEGACY_SOURCES)
	$(CC) -c -o $@ $<

raw-c-neural-network: libRawCNeuralNetwork.a
	$(CC) $(CFLAGS) -o $@ $(SRC_DIR)/main.c -L. libRawCNeuralNetwork.a

libNeuralNetworkUtils.a: $(LIBNNUTILS_OBJECTS)
	ar rcs $@ $^
	ranlib $@

libRawCNeuralNetwork.a: $(LIBRAWCNEURALNETWORK_OBJECTS)
	ar rcs $@ $^
	ranlib $@

libRawCNeuralNetworkLegacy.a: $(LIBRAWCNEURALNETWORK_LEGACY_OBJECTS)
	ar rcs $@ $^
	ranlib $@

utilsTest: libNeuralNetworkUtils.a
	$(CC) $(CFLAGS) -o utilsTest $(TEST_DIR)/runUtilsTests.c -L. libNeuralNetworkUtils.a -lcheck

legacyTest: libNeuralNetworkUtils.a libRawCNeuralNetworkLegacy.a
	$(CC) $(CFLAGS) -o legacyTest $(TEST_DIR)/runLegacyTest.c -L. libNeuralNetworkUtils.a libRawCNeuralNetworkLegacy.a -lcheck

neuralNetworkTest: libNeuralNetworkUtils.a libRawCNeuralNetwork.a
	$(CC) $(CFLAGS) -o neuralNetworkTest $(TEST_DIR)/runNeuralNetworkTest.c -L. libNeuralNetworkUtils.a libRawCNeuralNetwork.a -lcheck

tests: utilsTest legacyTest neuralNetworkTest

clean:
	find * ! -name "Makefile" ! -name "obj" -delete
	rm -f obj/*

.PHONY: all tests clean #raw-c-neural-network libNeuralNetworkUtils.a libRawCNeuralNetwork.a libRawCNeuralNetworkLegacy.a utilsTest legacyTest neuralNetworkTest
